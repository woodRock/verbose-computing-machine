import Data.List.Split 

solve :: [[[Int]]] -> [(Int,Int)] 
solve x = sum $ map foo x 
    where 
        foo [[x1,y1],[x2,y2]] = [(x1 + n*dx, y1+n*dy) | n <- [0..(max (abs (x2-x1) (abs (y2-y1))))]]
        dx = comp' x1 x2
        dy = comp' y1 y2

comp' :: Ord a => a -> a -> Int
comp' a b | b > a = 1
          | b < a = -1 
          | otherwise = 0

main :: IO () 
main = interact $ show . solve .  
    map (map (map read . splitOn ",") . (splitOn "->" . filter (/= ' '))) . lines 
